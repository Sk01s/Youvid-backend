import { Pool } from "pg";
const pool = new Pool({
  connectionString: process.env.NEON_DATABASE_URL,
  ssl: true,
});

// User model
export interface User {
  id: number;
  username: string;
  email: string;
  password: string;
  avatar_url?: string;
  created_at: Date;
}

export const createUsersTable = async () => {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      username VARCHAR(50) UNIQUE NOT NULL,
      email VARCHAR(100) UNIQUE NOT NULL,
      password TEXT NOT NULL,
      avatar_url TEXT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `);
};

// Category model
export interface Category {
  id: number;
  name: string;
}

export const createCategoriesTable = async () => {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS categories (
      id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      name VARCHAR(50) UNIQUE NOT NULL
    )
  `);
};
// SubscriptionHistory model
export interface SubscriptionHistory {
  id: number;
  user_id: number;
  channel_id: number;
  action: "subscribed" | "unsubscribed";
  created_at: Date;
}

export const createSubscriptionHistoryTable = async () => {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS subscription_history (
      id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
      channel_id INTEGER REFERENCES channels(id) ON DELETE CASCADE,
      action VARCHAR(12) NOT NULL CHECK (action IN ('subscribed', 'unsubscribed')),
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
  `);
};

// Channel model
export interface Channel {
  id: number;
  user_id: number;
  name: string;
  avatar: string;
  subscribers: number;
  verified: boolean;
  created_at: Date;
}

export const createChannelsTable = async () => {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS channels (
      id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
      name VARCHAR(100) NOT NULL,
      avatar TEXT NOT NULL,
      subscribers INTEGER DEFAULT 0,
      verified BOOLEAN DEFAULT FALSE,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `);
};

export interface Video {
  id: number;
  channel_id: number;
  category_id: number | null;
  title: string;
  description: string | null;
  thumbnail_key: string | null;
  duration: number | null;
  views: number;
  likes: number;
  status: "uploading" | "processing" | "ready" | "failed";
  processed_filename: string | null;
  original_filename: string;
  created_at: Date;
  error_message?: string | null;
}

export const createVideosTable = async () => {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS videos (
      id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      channel_id INTEGER NOT NULL REFERENCES channels(id) ON DELETE CASCADE,
      category_id INTEGER REFERENCES categories(id) ON DELETE SET NULL,
      title VARCHAR(255) NOT NULL,
      description TEXT,
      thumbnail_key TEXT,
      duration DOUBLE PRECISION,
      views INTEGER DEFAULT 0,
      status VARCHAR(20) DEFAULT 'uploading',
      processed_filename TEXT,
      original_filename TEXT NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      error_message TEXT,
      likes INTEGER DEFAULT'0'
    );
  `);
};

// Video Interaction model
export interface VideoInteraction {
  id: number;
  user_id: number;
  video_id: number;
  is_liked: boolean;
  is_saved: boolean;
}

export const createVideoInteractionsTable = async () => {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS video_interactions (
      id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
      video_id INTEGER REFERENCES videos(id) ON DELETE CASCADE,
      is_liked BOOLEAN DEFAULT FALSE,
      is_saved BOOLEAN DEFAULT FALSE,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      UNIQUE(user_id, video_id)
    )
  `);
};

// Subscription model
export interface Subscription {
  id: number;
  user_id: number;
  channel_id: number;
  created_at: Date;
}

export const createSubscriptionsTable = async () => {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS subscriptions (
      id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
      channel_id INTEGER REFERENCES channels(id) ON DELETE CASCADE,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      UNIQUE(user_id, channel_id)
    )
  `);
};

// Comment model
export interface Comment {
  id: number;
  user_id: number;
  video_id: number;
  text: string;
  likes: number;
  dislikes: number;
  created_at: Date;
}

export const createCommentsTable = async () => {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS comments (
      id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
      video_id INTEGER REFERENCES videos(id) ON DELETE CASCADE,
      text TEXT NOT NULL,
      likes INTEGER DEFAULT 0,
      dislikes INTEGER DEFAULT 0,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `);
};

// Comment Interaction model
export interface CommentInteraction {
  id: number;
  user_id: number;
  comment_id: number;
  is_liked: boolean;
  is_disliked: boolean;
  created_at: Date;
}

export const createCommentInteractionsTable = async () => {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS comment_interactions (
      id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
      comment_id INTEGER REFERENCES comments(id) ON DELETE CASCADE,
      is_liked BOOLEAN DEFAULT FALSE,
      is_disliked BOOLEAN DEFAULT FALSE,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      UNIQUE(user_id, comment_id)
    )
  `);
};
export interface VideoView {
  id: number;
  user_id: number;
  video_id: number;
  created_at: Date;
}

export const createVideoViewsTable = async () => {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS video_views (
      id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
      video_id INTEGER REFERENCES videos(id) ON DELETE CASCADE,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      UNIQUE(user_id, video_id)
    )
  `);
};

async function seedCategories() {
  const defaultCategories = [
    "Music",
    "Gaming",
    "Education",
    "Entertainment",
    "Technology",
    "Sports",
    "Travel",
    "Food",
  ];

  for (const name of defaultCategories) {
    try {
      await pool.query(
        `INSERT INTO categories (name) VALUES ($1) ON CONFLICT (name) DO NOTHING`,
        [name]
      );
    } catch (err) {
      console.error("Error seeding category:", name, err);
    }
  }
}

// Initialize all tables
export const initializeDatabase = async () => {
  await createUsersTable();
  await createCategoriesTable();
  await createChannelsTable();
  await createVideosTable();
  await createVideoInteractionsTable();
  await createSubscriptionsTable();
  await createCommentsTable();
  await createCommentInteractionsTable();
  await createVideoViewsTable();
  await createSubscriptionHistoryTable();
};

export default pool;
